#!/usr/bin/env python3
"""
Script de test pour le syst√®me RAG
"""

print("üîç Test des d√©pendances RAG...")
print("=" * 50)

# Test 1: Imports de base
print("\n1. Test des imports de base...")
try:
    import streamlit as st
    print("‚úÖ Streamlit")
except ImportError as e:
    print(f"‚ùå Streamlit: {e}")

try:
    import pandas as pd
    print("‚úÖ Pandas")
except ImportError as e:
    print(f"‚ùå Pandas: {e}")

try:
    import numpy as np
    print("‚úÖ NumPy")
except ImportError as e:
    print(f"‚ùå NumPy: {e}")

# Test 2: Imports RAG
print("\n2. Test des imports RAG...")
try:
    import fitz  # PyMuPDF
    print("‚úÖ PyMuPDF (fitz)")
except ImportError as e:
    print(f"‚ùå PyMuPDF: {e}")

try:
    from tqdm.auto import tqdm
    print("‚úÖ tqdm")
except ImportError as e:
    print(f"‚ùå tqdm: {e}")

try:
    from langchain_text_splitters import RecursiveCharacterTextSplitter
    print("‚úÖ langchain_text_splitters")
except ImportError as e:
    print(f"‚ùå langchain_text_splitters: {e}")

try:
    from langchain_community.embeddings import HuggingFaceEmbeddings
    print("‚úÖ langchain_community.embeddings")
except ImportError as e:
    print(f"‚ùå langchain_community.embeddings: {e}")

try:
    from langchain_community.vectorstores import FAISS
    print("‚úÖ langchain_community.vectorstores")
except ImportError as e:
    print(f"‚ùå langchain_community.vectorstores: {e}")

try:
    from langchain_core.runnables import RunnablePassthrough
    from langchain_core.output_parsers import StrOutputParser
    print("‚úÖ langchain_core.runnables et output_parsers")
except ImportError as e:
    print(f"‚ùå langchain_core: {e}")

try:
    from langchain_community.llms import HuggingFacePipeline
    print("‚úÖ langchain_community.llms")
except ImportError as e:
    print(f"‚ùå langchain_community.llms: {e}")

try:
    from transformers import AutoModelForSeq2SeqLM, AutoTokenizer, pipeline
    print("‚úÖ transformers")
except ImportError as e:
    print(f"‚ùå transformers: {e}")

# Test 3: Test de cr√©ation d'embeddings
print("\n3. Test de cr√©ation d'embeddings...")
try:
    from langchain_community.embeddings import HuggingFaceEmbeddings
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    print("‚úÖ Embeddings cr√©√©s avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur embeddings: {e}")

# Test 4: Test de text splitter
print("\n4. Test de text splitter...")
try:
    from langchain_text_splitters import RecursiveCharacterTextSplitter
    splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=150)
    test_text = "Ceci est un test de division de texte pour v√©rifier que le splitter fonctionne correctement."
    chunks = splitter.split_text(test_text)
    print(f"‚úÖ Text splitter fonctionne - {len(chunks)} chunks cr√©√©s")
except Exception as e:
    print(f"‚ùå Erreur text splitter: {e}")

# Test 5: Test FAISS
print("\n5. Test FAISS...")
try:
    from langchain_community.vectorstores import FAISS
    from langchain_community.embeddings import HuggingFaceEmbeddings
    
    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
    test_texts = ["Test document 1", "Test document 2"]
    db = FAISS.from_texts(test_texts, embeddings)
    print("‚úÖ FAISS cr√©√© avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur FAISS: {e}")

# Test 6: Test mod√®le local
print("\n6. Test mod√®le local...")
try:
    from transformers import AutoTokenizer, AutoModelForSeq2SeqLM, pipeline
    from langchain_community.llms import HuggingFacePipeline
    
    model_name = "google/flan-t5-base"
    print(f"Tentative de chargement du mod√®le {model_name}...")
    
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
    pipe = pipeline("text2text-generation", model=model, tokenizer=tokenizer, max_length=512)
    llm = HuggingFacePipeline(pipeline=pipe)
    print("‚úÖ Mod√®le local charg√© avec succ√®s")
except Exception as e:
    print(f"‚ùå Erreur mod√®le local: {e}")

print("\n" + "=" * 50)
print("üéØ R√©sum√© du diagnostic:")
print("Si tous les tests passent, le probl√®me pourrait √™tre dans l'application Streamlit.")
print("Si certains tests √©chouent, installez les packages manquants avec:")
print("pip install -r requirements.txt")
