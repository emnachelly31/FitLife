#!/usr/bin/env python3
"""
Test simple du syst√®me RAG
"""

def test_rag_imports():
    """Test des imports RAG"""
    try:
        import fitz
        from tqdm.auto import tqdm
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        from langchain_community.embeddings import HuggingFaceEmbeddings
        from langchain_community.vectorstores import FAISS
        from langchain_core.runnables import RunnablePassthrough
        from langchain_core.output_parsers import StrOutputParser
        from langchain_community.llms import HuggingFacePipeline
        from transformers import AutoModelForSeq2SeqLM, AutoTokenizer, pipeline
        
        print("‚úÖ Tous les imports RAG fonctionnent !")
        return True
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        return False

def test_rag_system():
    """Test de cr√©ation d'un syst√®me RAG simple"""
    try:
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        from langchain_community.embeddings import HuggingFaceEmbeddings
        from langchain_community.vectorstores import FAISS
        
        # Texte de test
        test_text = """
        La nutrition est l'ensemble des processus par lesquels un organisme vivant utilise les aliments pour assurer son fonctionnement.
        Les macronutriments comprennent les prot√©ines, les glucides et les lipides.
        Les micronutriments comprennent les vitamines et les min√©raux.
        Une alimentation √©quilibr√©e est essentielle pour la sant√©.
        """
        
        # Diviser le texte
        splitter = RecursiveCharacterTextSplitter(chunk_size=200, chunk_overlap=50)
        texts = splitter.split_text(test_text)
        
        # Cr√©er les embeddings
        embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")
        
        # Cr√©er la base vectorielle
        db = FAISS.from_texts(texts, embeddings)
        retriever = db.as_retriever(search_kwargs={"k": 2})
        
        # Test de recherche
        docs = retriever.invoke("Qu'est-ce que la nutrition ?")
        
        print("‚úÖ Syst√®me RAG cr√©√© avec succ√®s !")
        print(f"‚úÖ Recherche fonctionnelle - {len(docs)} documents trouv√©s")
        
        return True
    except Exception as e:
        print(f"‚ùå Erreur syst√®me RAG: {e}")
        return False

if __name__ == "__main__":
    print("üß™ Test du syst√®me RAG...")
    print("=" * 40)
    
    # Test 1: Imports
    imports_ok = test_rag_imports()
    
    if imports_ok:
        # Test 2: Syst√®me RAG
        test_rag_system()
    
    print("=" * 40)
    print("üéØ Test termin√© !")
